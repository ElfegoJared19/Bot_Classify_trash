# -*- coding: utf-8 -*-
"""Copia de classify_bot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e_TfGZFCJY4tlCvaoXzWT1dNkcfBVsoa

# Instalar Telegram API
"""

!pip install python-telegram-bot==5.3.0

"""# Configurar Google Drive"""

from google.colab import drive
drive.mount('/content/drive')

"""# Seleccionar directorio de trabajo"""

# Commented out IPython magic to ensure Python compatibility.
# %cd 'drive/My Drive/classify_bot_basura'
!pwd
!ls

"""# Librerias"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
import tensorflow as tf
import sys
import os
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import logging

print("Librerías importadas correctamente")

"""# Classify"""

def classify(image_path):
    # Read the image_data
    image_data = tf.io.gfile.GFile(image_path, 'rb').read()

    # Loads label file, strips off carriage return
    label_lines = [line.rstrip() for line in tf.io.gfile.GFile("tf_files/retrained_labels.txt")]

    # Unpersists graph from file
    with tf.io.gfile.GFile("tf_files/retrained_graph.pb", 'rb') as f:
        graph_def = tf.compat.v1.GraphDef()
        graph_def.ParseFromString(f.read())
        _ = tf.import_graph_def(graph_def, name='')

    with tf.compat.v1.Session() as sess:
        # Feed the image_data as input to the graph and get first prediction
        softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')
        
        predictions = sess.run(softmax_tensor, \
                {'DecodeJpeg/contents:0': image_data})
        
        # Sort to show labels of first prediction in order of confidence
        top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]
        
        result = None
        for node_id in top_k:
            human_string = label_lines[node_id]
            accuracy = predictions[0][node_id]
            print('%s (score = %.5f)' % (human_string, accuracy))
            if accuracy >= 0.9:
                result = human_string
                if result == "inorganica":
                  result = "El tipo de basura es: " + str(human_string) + " https://www.youtube.com/watch?v=yHVDY__B3XQ&t=6s"
                else:
                  result = "El tipo de basura es: "  + str(human_string) + " https://www.youtube.com/watch?v=y3AHXOkM-Vc&t=42s"
    return result


print("Método para clasificar creado correctamente")

"""# Token de telegram"""

# ClassifyImagesBot
token = '1023344422:AAFPauclTyu-H0fo3OyxvYTOZXaDCM0FG9U'

print("token registrado")

"""# Configuración del bot"""

# Enable logging
try:
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
    logger = logging.getLogger(__name__)
except Exception as e:
    print("Error logging {}".format(e.args))

def start(bot, update):
    try:
        username = update.message.from_user.username
        message = "Hola " + username
        update.message.reply_text(message)
    except Exception as e:
        print("Error start {}".format(e.args))


def help(bot, update):
    try:
        username = update.message.from_user.username
        update.message.reply_text('Hello {}, please send a image for classify'.format(username))
    except Exception as e:
        print("Error help {}".format(e.args))

def analize(bot, update):
    try:
        message = "Receiving image..."
        update.message.reply_text(message)
        print(message)
        
        photo_file = bot.getFile(update.message.photo[-1].file_id)
        id_user = update.message.from_user.id
        id_file = photo_file.file_id
        id_analisis = str(id_user) + "-" + str(id_file)
        
        filename = os.path.join('downloads/', '{}.jpg'.format(id_analisis))
        photo_file.download(filename)
        message = "Image received, analyzing, please wait a few seconds"
        update.message.reply_text(message)
        print(message)
        
        result = classify(filename)
        print(result)
        update.message.reply_text(result)
        print("Waiting image..")
    except Exception as e:
        print("Error analize {}".format(e.args))


def echo(bot, update):
    try:
        mensaje=update.message.text
        print(mensaje)
        if "hola" in mensaje or "HOLA" in mensaje or "Hola" in mensaje or "Hello" in mensaje or "Hi" in mensaje:
          update.message.text="¡Hola! ¿Como estas?, Te ayudare a clasificar tu basura, Mandame una foto y probemos"
        elif "bien"in mensaje or "Bien" in mensaje or "BIEN" in mensaje or "MAL" in mensaje or "mal" in mensaje or "Mal" in mensaje or "increible" in mensaje or "Increible" in mensaje or "INCREIBLE" in mensaje:
          update.message.text="¡Me alegro!, Te ayudare a clasificar tu basura, Enviame una foto y te dire que tipo de basura es"
        elif "tipo basura" in mensaje or "tipo" in mensaje or "TIPO" in mensaje or "que basura es" in mensaje or "¿que basura es?" in mensaje or "¿Que basura es?" in mensaje or "QUE BASURA ES" in mensaje or "¿QUE BASURA ES?" in mensaje or "Tipo de basura" in mensaje or "Tipo basura" in mensaje:
           update.message.text="Enviame una foto y te dire que tipo de basura es"
        elif "clasifica" in mensaje or "Clasifica" in mensaje or "CLASIFICA" in mensaje:
          update.message.text="Enviame una foto y te dire que tipo de basura es"
        elif "que haces" in mensaje or "¿que haces?" in mensaje or "¿QUE HACES?" in mensaje or "QUE HACES" in mensaje:
          update.message.text="Voy averiguar que tipo de basura tienes, Enviame una foto y hagamos una prueba!"
        elif "clasifica mi basura" in mensaje or "CLASIFICA MI BASURA" in mensaje:
          update.message.text="Enviame una foto y te dire que tipo de basura es"
        elif "que tipo de basura es" in mensaje or "¿que tipo de basura es" in mensaje  or "Que tipo de basura es?" in mensaje or "¿Que tipo de basura es?" in mensaje or "QUE TIPO DE BASURA ES" in mensaje or "¿QUE TIPO DE BASURA ES?" in mensaje or "QUE TIPO DE BASURA ES?" in mensaje:
          update.message.text="Te ayudare solo si me envias una foto la basura que quieres clasificar!"
        elif "necesito" in mensaje or "NECESITO" in mensaje:
          update.message.text="Puedo decirte que tipo de basura tienes, envia una foto y haremos la prueba!"
        elif "ayuda" in mensaje or "Ayuda" in mensaje:
          update.message.text="Te ayudare solo si me envias una foto la basura que quieres clasificar!"
        return update.message.reply_text (update.message.text)
    except Exception as e:
        print("Error echo{}".format(e.args))

def error(bot, update, error):
    try:
        logger.warn('Update "%s" caused error "%s"' % (update, error))
    except Exception as e:
        print("Error error {}".format(e.args))

def main():
    try:
        print('ClassifyImagesBot init token')

        updater = Updater(token)
        # Get the dispatcher to register handlers
        dp = updater.dispatcher

        print('ClassifyImagesBot init dispatcher')


        # on different commands - answer in Telegram
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("help", help))

        # on noncommand detect the document type on Telegram
        dp.add_handler(MessageHandler(Filters.text, echo))
        dp.add_handler(MessageHandler(Filters.photo, analize))

        # log all errors
        dp.add_error_handler(error)

        # Start the Bot
        updater.start_polling()
        print('ClassifyImagesBot ready')
        updater.idle()
    except Exception as e:
        print("Error main {}".format(e.message))

print("Bot configurado correctamente")

"""# Ejecutar el Bot"""

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print("Error name: {}".format(e.args))